---
apiVersion: thismatters.github/v1alpha
kind: Django
metadata:
  name: my-project
  namespace: default
spec:
  host: app.moneypositive.coop
  image: registry.gitlab.com/registry.gitlab.com/money-positive/mp-app
  version: "2021.12.1"
  replicas:
    app: 2
    worker: 1
  useCelery: true
  useBeat: true
  useRedis: true
  clusterIssuer: letsencrypt
  ports:
    # these are defaults
    app: 8000
    redis: 6379
  # set some ENVs
  env: {}
  # get some ENVs from predefined secrets/configmaps
  envFrom:
  - configMapRef:
      name: env
  - secretRef:
      name: aws
  - secretRef:
      name: crypto
  - secretRef:
      name: database
  - secretRef:
      name: email
  - secretRef:
      name: google-auth
  - secretRef:
      name: paysimple
  - secretRef:
      name: plaid
  - secretRef:
      name: secret-key
  imagePullSecrets:
  - name: gitlab-registry-read
  volumes:
  - name: google-drive-client-secret
    secret:
      secretName: google-drive
  volumeMounts:
  - name: google-drive-client-secret
    mountPath: "/app/src/secret/"
    readOnly: true
  initManageCommands:
  # these will run in an init container, migrate might get special treatment vis-a-vi rolling back
  - ["migrate"]
  - ["create_groups"]
  - ["ensure_contract_pricing"]
  - ["initialize_payment_webhooks"]
  - ["loaddata", "money_positive/fixtures/us_states.json"]
  commands:
    app:
      command: ["gunicorn"]
      args: ["money_positive.wsgi:application", "-b", "0.0.0.0:8000"]
    worker:
      command: ["celery"]
      args: ["--app=money_positive", "worker", "--loglevel=INFO"]
    beat:
      command: ["celery"]
      args: ["--app=money_positive", "beat", "--loglevel=INFO", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler", "--pidfile='/tmp/celerybeat.pid'"]
  appProbeSpec:
    httpGet:
      scheme: HTTP
      path: /privacy/
      port: 8000
      httpHeaders:
        - name: Host
          value: app.moneypositive.coop
    initialDelaySeconds: 45
    periodSeconds: 11
    timeoutSeconds: 2
    failureThreshold: 3
status:
  version: "2021.12.1"
  condition: "migrating | running | degraded"
  migrationVersion: "2021.12.1"
  replicas:
    app: 3
    worker: 2
  created:
    deployment:
      redis: redis
      beat: beat-2021.12.1
      app: app-2021.12.1
      worker: worker-2021.12.1
    service:
      redis: redis-service
      app: app-service
    ingress:
      app: app-ingress
